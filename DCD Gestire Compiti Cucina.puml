@startuml Gestire Compiti Cucina
skinparam Style strictuml
skinparam classAttributeIconSize 0

namespace KitchenTaskManagement {
    ' GRASP Controller
    class KitchenTaskManager{
        --<b>event sender methods</b>--
        +addReceiver(er: kitchenTaskReceiver)
        +removeReceiver(er: kitchenTaskReceiver)
        +notifySheetCreate(s: SummarySheet)
        +notifyTaskCreate(t: Task)
        --<b>operation methods</b>--
        + createSummarySheet(event: Event, service: Service)
        + editTask(task: Task, newAmount: int, newDuration: int)
    }

    class KitchenTaskReceiver{
        --
        +<i>updateSheetCreate(s: SummarySheet)</i>
        +<i>updateTaskCreate(t: Task)</i>
    }

    ' Compito
    class Task{
        - amount: int
        - estimatedDuration: Duration
        --
        + create(kitchenDuty: KitchenDuty)
        + editDetails(newAmount: int, newDuration: int)
    }

    ' Foglio Riepilogativo
    class SummarySheet {
        + create(menu: Menu)
        + addExtraDuty(kd: KitchenDuty)
        + deleteExtraDuty(kd: KitchenDuty)        
    }

    KitchenTaskManager -> "0..1" SummarySheet: currentSheet
    KitchenTaskManager -> "0..n" KitchenTaskReceiver: eventReceivers
    SummarySheet -> "1..n" Task: tasks
    SummarySheet -> "0..n" RecipeManagement.KitchenDuty: extraDuties
    Task -> "1..n" Job: jobs
    Task -> "0..1" RecipeManagement.KitchenDuty: optionalDuty: Optional<KitchenDuty>


    ' Incarico
    class Job {
        - amount: int
        - estimatedDuration: Duration
    }

    Job -> "1"  TurnManagement.Cook: cook
    Job -> "1" TurnManagement.Turn: turn
}

'prova

namespace TurnManagement {
    class Cook

    class Turn {
        - startDate: Date
        - endDate: Date
        - complete: boolean
        --
        + getDuration(): Duration
    }

    Cook -> "0..n" Turn: availabilities: HashMap<Turn, Duration>
}

namespace RecipeManagement {
    class KitchenDuty {
        - name: String
        - instructions: String
        - resultingAmount: int
        - constantConcreteActivityTime: Duration
        - variableConcreteActivityTime: Duration
        {abstract} List<KitchenDuty> getSubDuties()
    }
    KitchenDuty -> "1" UserManagement.User: author

    class Recipe {

    }

    class Preparation{

    }

    Recipe -|> KitchenDuty
    Preparation -|> KitchenDuty
    Recipe -> "0..n" Preparation: subDuties
}

namespace EventManagement {
    class Service {
        + getMenu(): Menu
    }
    Service -> "0..1" MenuManagement.Menu: menu

    class Event {
        - active: boolean
        --
        + isActive(): boolean
        + containsService(s:Service): boolean
    }
    Event -> "1..n" Service: "services"
    Event -> "1" UserManagement.User: "assignedChef"

}

namespace UserManagement {
    class User {
        + isChef(): boolean
    }

    class UserManager {

        --<b>event sender methods</b>--
        --<b>operation methods</b>--
        +getCurrentUser(): User
    }

    UserManager -> "0..1" User: currentUser
}

namespace MenuManagement {
    class Menu
    class Section
    class MenuItem

    Menu -> "0..n" Section: sections
    Menu -> "0..n" MenuItem: freeItems
    Section -> "0..n" MenuItem: sectionItems

    MenuItem -> RecipeManagement.Recipe: itemRecipe
}

namespace GeneralModule {
    UseCaseLogicException -right|> Exception
    EventException -down|> Exception


}

@enduml