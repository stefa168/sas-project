@startuml Gestire Compiti Cucina
skinparam Style strictuml
skinparam classAttributeIconSize 0

namespace KitchenTaskManagement {
    ' GRASP Controller
    class KitchenTaskManager{
        --<b>event sender methods</b>--
        +addReceiver(er: kitchenTaskReceiver)
        +removeReceiver(er: kitchenTaskReceiver)
        +notifySheetCreate(s: SummarySheet)
        +notifyTaskCreate(t: Task)
        --<b>operation methods</b>--

    }

    class KitchenTaskReceiver{
        --
        +<i>updateSheetCreate(s: SummarySheet)</i>
        +<i>updateTaskCreate(t: Task)</i>
    }

    ' Compito
    class Task{
        + create(kitchenDuty: KitchenDuty)
    }

    ' Foglio Riepilogativo
    class SummarySheet {
        + create(menu: Menu)
    }

    SummarySheet -> "1..n" Task: tasks
    KitchenTaskManagement -> "0..1": sheet
    SummarySheet -> "0..n" RecipeManagement.KitchenDuty: additionDuties
    Task -> "1..n" Job: jobs
    KitchenTaskManager ->"0..n" KitchenTaskReceiver: eventReceivers


    ' Incarico
    class Job
}

'prova

namespace TurnManagement {
    class Cook

    class Turn
}

namespace RecipeManagement {
    class KitchenDuty {
        - name: String
        - instructions: String
        - resultingAmount: int
        - constantConcreteActivityTime: Duration
        - variableConcreteActivityTime: Duration
        {abstract} List<KitchenDuty> getSubDuties()
        
    }
    KitchenDuty --> "1" UserManagement.User: author

    class Recipe {

    }

    class Preparation{

    }

    Recipe -|>KitchenDuty
    Preparation -|>KitchenDuty
    Recipe -> "0..n" Preparation: subDuties
}

namespace EventManagement {
    class Service {
        + getMenu(): Menu
    }
    Service -> "0..1" MenuManagement.Menu: menu

    class Event {
        - active: boolean
        --
        + isActive(): boolean
        + containsService(s:Service): boolean 
    }
    Event -> "1..n" Service: "services"

}

namespace UserManagement {
    class User {
        + isChef(): boolean
    }

    class UserManager {
        
        --<b>event sender methods</b>--
        --<b>operation methods</b>--
        +getCurrentUser(): User
    }

    UserManager -> "0..1" User: currentUser
}

namespace MenuManagement {
    class Menu
    class MenuItem
    class Section

    Menu -> "0..n" Section:sections
    Section -> "0..n" MenuItem:sectionItems
    Menu->"0..n" MenuItem:freeItems
    MenuItem->RecipeManagement.Recipe:itemRecipe
}

namespace GeneralModule {
    UseCaseLogicException -right|> Exception
    EventException -down|> Exception
    
}

@enduml