@startuml
skinparam Style strictuml
skinparam SequenceMessageAlign center

skinparam sequence {
    ActorBorderColor Black
    ActorBackgroundColor White
    ParticipantBorderColor Black
    ParticipantBackgroundColor White
}

actor Chef
participant Sistema

title Gestire compiti della Cucina - UC Base

alt #f3d0ff
    Chef -> Sistema: **1**. creaEvento()
    return nuovo evento
    ||10||
else
    Chef -> Sistema: **1a.1**. apriEvento()
    return evento attivo

    opt #b6efb6
        alt #f3d0ff
            Chef -> Sistema: **1a.2**. annullaEvento()
            return warning penale
'            destroy Sistema
            ||10||
        else
            Chef -> Sistema: **1a.2a**. terminaEvento()
            return ok
'            destroy Sistema
            ||10||
        end
        ' non abbiamo modo di modificare il colore della X
        destroy Sistema
        ||10||
    end
else
    Chef -> Sistema: **1b.1**. apriEvento()
    return evento terminato o annullato

    opt #b6efb6
        Chef -> Sistema: **1b.2**. gestisciNote(note)
        return ok
        ||10||
    end

    ||10||
    destroy Sistema
'    note over Chef, Sistema #fff: Il caso d'uso termina.
    ||10||
end

loop #e0e0e0
    opt #e0e0e0
        Chef -> Sistema: **2**. aggiungiNote(note)
        return ok
    end

    opt #e0e0e0
        Chef -> Sistema: **3**. visualizzaStatoCucina()
        return stato cucina
    end

    opt #e0e0e0
        Chef -> Sistema: **4**. compilaDettagliEvento(durata?, periodicitÃ ?, numeroServizi?, numeroPartecipanti?, date?, luoghi?)
        return ok
    end

    opt #e0e0e0
        Chef -> Sistema: **5**. aggiungiServizio(data, oraInizio, oraTermine, tipologia, dettagli)
        return ok
    end

    opt #e0e0e0
        Chef -> Sistema: **6**. assegnaChef(chef)
        return ok
    end

    opt #e0e0e0
        Chef -> Sistema: **7**. confermaMenu(menu)
        return ok
    end

    opt #e0e0e0
        Chef -> Sistema: **8**. assegnaPersonale(personale, turno)
        return ok
    end
end
@enduml