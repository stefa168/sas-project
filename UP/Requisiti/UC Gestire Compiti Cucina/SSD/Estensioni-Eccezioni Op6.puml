@startuml
skinparam Style strictuml
skinparam SequenceMessageAlign center

skinparam sequence {
    ActorBorderColor Black
    ActorBackgroundColor White
    ParticipantBorderColor Black
    ParticipantBackgroundColor White
}

actor Chef
participant Sistema

title Gestire compiti della Cucina - UC Base

Chef -> Sistema: **1**. creaFoglioRiepilogativo(evento, servizio)
return foglio precompilato

loop #e0e0e0
    opt #e0e0e0
        Chef -> Sistema: **2**. aggiungiMansioneFuoriMenu(mansioneDiCucina)
        return ok
    end

    opt #e0e0e0
        Chef -> Sistema: **3**. organizzaCompiti(ordine)
        return compiti organizzati
    end

    opt #e0e0e0
        Chef -> Sistema: **4**. consultaTurni()
        return turni
    end

    opt #e0e0e0
        Chef -> Sistema: **5**. modificaCompito(compito, quantità?, tempoStimato?)
        return ok
    end

    opt #b6efb6
        alt #f3d0ff
            Chef -> Sistema: **6**. creaIncaricoDiCucina(compito, turno, quantità, tempoStimato)
            alt #f3a7c9
                return ok
            else
                Chef <- Sistema: **6a.1**. Il turno si è già concluso
                destroy Sistema
            else
                Chef <- Sistema: **6b.1**. Il turno è segnato come al completo
                destroy Sistema
            else
                Chef <- Sistema: **6c.1**. Il compito associato non è stato compilato
                destroy Sistema
            else
                Chef <- Sistema: **6d.1**. Il compito è impostato come da non farsi
                destroy Sistema
            end
        else
            Chef -> Sistema: **6a.1**. cancellaIncaricoDiCucina(incarico)
            alt #f3a7c9
                return ok
            else
                Chef <- Sistema: **6a.1a**. Il turno si è già concluso
                destroy Sistema
            end
        else
            Chef -> Sistema: **6b.1**. modificaDettagliIncaricoDiCucina(incarico, quantità?, tempoStimato?)
            alt #f3a7c9
                return ok
            else
                Chef <- Sistema: **6b.1a.1**. Se un cuoco è assegnato, non ha più tempo per eseguire l'incarico modificato
                destroy Sistema
            else
                Chef <- Sistema: **6b.1b.1**. Il turno associato all'incarico si è già concluso
                destroy Sistema
            end
        else
            Chef -> Sistema: **6c.1**. assegnaCuoco(incarico, cuoco)
            alt #f3a7c9
                return ok
            else
                Chef <- Sistema: **6c.1a.1**. Il cuoco non avrebbe tempo per eseguire il nuovo incarico
                destroy Sistema
            else
                Chef <- Sistema: **6c.1b.1**. Il turno associato all'incarico si è già concluso
                destroy Sistema
            end
        else
            Chef -> Sistema: **6d.1** modificaStatoTurnoCucina(turno, nuovoStato)
            alt #f3a7c9
                return ok
            else
                Chef <- Sistema: **6d.1a.1**. Il turno selezionato si è già concluso
                destroy Sistema
            end
        end
    end

end


@enduml