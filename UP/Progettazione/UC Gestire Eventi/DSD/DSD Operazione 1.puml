@startuml
skinparam Style strictuml

collections UI
participant "eventManager: EventManager" as em
participant "userMgr: UserManager" as um
participant "eventManager.eventReceivers: EventEventReceivers" as eer

UI -> em: createEvent(startDate, client, name)
activate em
    em -> um: getCurrentUser()
    activate um
        em <<-- um: user
    deactivate um

    alt !user.isOrganizer()
        UI <<-- em: throw UseCaseLogicException
    else startDate.compareTo(LocalDate.now())) < 0
        UI <<-- em: throw EventException
    else
        participant "macroEvent: MacroEvent" as maev
        em -->> maev **: create(client, user, name)
        activate maev
            participant "macroEvent.events: ArrayList<Event>" as events
            maev -->> events**:create()
            activate events
                maev <<-- events: events
            deactivate events
            maev -> maev: this.events = events
            maev -> maev: this.client = client
            maev -> maev: this.name = name
            maev -> maev: this.organizer = user
            em <<-- maev: macroEvent
        deactivate maev

        em -> maev: addEvent(startDate)
        activate maev
            participant "event: Event" as ev
            maev -->> ev **: create(startDate)
            activate ev
                ev -> ev: this.startDate = startDate
                ev -> ev: this.state = programmed
                maev <<-- ev: event
            deactivate ev
            maev -> events: add(event)
            activate events
            deactivate events
            em <<-- maev: event
        deactivate maev
        |||
        em -> em: this.currentEvent = event
        em -> em: notifyCreateEvent(event)
        activate em
            loop ""for all"" receivers in eventReceivers
                em -> eer: updateCreateEvent(event)
                activate eer
                deactivate eer
            end
        deactivate em
        UI <<--em: event
        deactivate em
    end

@enduml