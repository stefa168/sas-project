@startuml
skinparam Style strictuml

collections UI
participant "evenManager: EventManager" as em
participant "userMgr: UserManager" as um
participant "macroEvent: MacroEvent" as maev
participant "currentEvent: Event" as event
participant "task: Task" as task
participant "service.serviceJobs: ArrayList<ServiceJob>" as sj
participant "ev: Event" as ev
participant "cancelEvents: ArrayList <Event>" as evcanc
participant "eventManager.eventReceivers: EventEventReceivers" as eer

UI -> em: cancelEvent(strategy)
activate em
    em -> um: getCurrentUser()
    activate um
        em <<-- um: user
    deactivate um

    alt !user.isOrganizer() || currentEvent.getMacroEvent().getOrganizer() != user || !(event.state.equals("active")
        UI <<-- em: throw UseCaseLogicException
    else

        em -> maev: cancel(currentEvent, strategy)
        activate maev
            maev -->> evcanc**: create()
            activate evcanc
            maev <<-- evcanc: cancelEvents
            deactivate evcanc

            maev -> event: cancel()
            activate event
            event -> event: this.state = cancel

            loop for all service in currentEvent.services
                loop for all task in service.sheet.tasks
                    event -> task: deleteAllKitchenJobs()
                    activate task
                    loop for all job in task.jobs
                        task -> task: this.deleteKitchenJob(job)
                        note right: La definizione completa di\n//deleteKitchenJob(job)// Ã¨ nel DSD 6a \ndell' UC Gestire Compiti Cucina
                    end
                    event <<-- task: task
                    deactivate task

                end

                event -> sj: clear ()
                activate sj
                deactivate sj
            end
            maev <<-- event: currentEvent
            deactivate event
            maev -> evcanc: add(currentEvent)
            activate evcanc
            deactivate evcanc
            |||
            alt strategy.equals("All")
                loop for all ev in macroEvent.events && !ev.equals(currentEvent) && ev.state.equals("active")
                    maev -> ev: cancel()
                    note right: La definizione di //cancel()// usata qua e sotto \nfa riferimento a quella sopra definita
                    activate ev
                    maev <<-- ev: ev
                    deactivate ev
                    maev -> evcanc: add(ev)
                    activate evcanc
                    deactivate evcanc
                end
            else strategy.equals ("AllNext")
                loop for all ev in macroEvent.events && !ev.equals(currentEvent) && ev.getStartDate().compareTo(currentEvent.getStartDate()) > 0 && ev.state.equals("active")
                    maev -> ev: cancel()
                    activate ev
                    maev <<-- ev: ev
                    deactivate ev
                    maev -> evcanc: add(ev)
                    activate evcanc
                    deactivate evcanc
                end
            end
        em <<-- maev: cancelEvents
        deactivate maev
        loop for all event in cancelEvents
            em -> em: notifyCancelEvent(event)
            activate em
            loop for all receivers in eventReceivers
                em -> eer: updateCancelEvent(event)
                activate eer
                deactivate eer
            end
            deactivate em
        |||
        end

    end
deactivate em
@enduml