@startuml
skinparam Style strictuml

collections UI
participant "eventManager: EventManager" as em
participant "userMgr: UserManager" as um
participant "event: Event" as ev
participant "service.summarySheet: SummarySheet" as ss
participant "task: Task" as task
participant "service.serviceJobs: ArrayList<ServiceJob>" as sj
participant "event.services : ArrayList <Service>" as evse
participant "event.macroEvent: MacroEvent" as maev
participant "macroEvent.events: ArrayList <Event>" as events
participant "eventManager.eventReceivers: EventEventReceivers" as eer


UI -> em: deleteEvent(event)
activate em
    em -> um: getCurrentUser()
    activate um
        em <<-- um: user
    deactivate um

    alt !user.isOrganizer() || event.getMacroEvent().getOrganizer() != user || event.equals(event.getMacroEvent().getDefaultEvent()) || !(event.state.equals("terminated") || event.state.equals("cancelled"))
        UI <<-- em: throw UseCaseLogicException
    else
        em -> ev: delete()
        activate ev
            loop for all service in event.services

                ev -> ss: deleteAllTasks()
                activate ss
                    loop for all task in sheet.tasks
                        ss -> task: deleteAllKitchenJobs()
                        activate task
                        note right: La definizione completa di\n//deleteAllKitchenJobs()// Ã¨ nel DSD 1a.2 \ndell' UC Gestire Eventi
                        ss <<-- task: task
                        deactivate task
                    end
                ev <<-- ss: summarySheet
                deactivate ss

                ev -> sj: clear ()
                activate sj
                deactivate sj
            end

            ev-> evse : clear ()
            activate evse
            deactivate evse

            ev -> maev: delete(this)
            activate maev
                maev -> events: remove(event)
                activate events
                deactivate events
            deactivate maev
        deactivate ev

        |||

        em -> em: notifyDeleteEvent(event)
        activate em
            loop for all receivers in eventReceivers
                em -> eer: updateDeleteEvent(event)
                activate eer
                deactivate eer
            end
        deactivate em
        |||
    end
deactivate em
@enduml