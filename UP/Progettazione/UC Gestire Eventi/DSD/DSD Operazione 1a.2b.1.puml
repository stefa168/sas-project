@startuml
skinparam Style strictuml

collections UI
participant "eventManager: EventManager" as em
participant "userMgr: UserManager" as um
participant "macroEvent: MacroEvent" as macroEvent
participant "deleteEvents: ArrayList <Event>" as evdel
participant "currentEvent: Event" as ev
participant "ev: Event" as evstrg
participant "service.summarySheet: SummarySheet" as ss
participant "task: Task" as task
participant "service.serviceJobs: ArrayList<ServiceJob>" as sj
participant "event.services : ArrayList <Service>" as evse
participant "macroEvent.events: ArrayList <Event>" as events

participant "eventManager.eventReceivers: EventEventReceivers" as eer


UI -> em: deleteEvent(strategy)
activate em
    em -> um: getCurrentUser()
    activate um
        em <<-- um: user
    deactivate um

    alt !user.isOrganizer() || !(event.state.equals("programmed") )
        UI <<-- em: throw UseCaseLogicException
    else

        em -> macroEvent: delete(this.currentEvent, strategy)
        activate macroEvent
            macroEvent -->> evdel**: create()
            activate evdel
                macroEvent <<-- evdel: deleteEvents
            deactivate evdel

            macroEvent -> ev: delete()

            activate ev
                loop ""for all"" service ""in"" currentEvent.services
                    ev -> ss: deleteAllTasks()
                    activate ss
                        loop ""for all"" task ""in"" sheet.tasks
                            ss -> task: deleteAllKitchenJobs()
                                activate task
                                    note right: La definizione completa di\n//deleteAllKitchenJobs()// Ã¨ nel DSD 1a.2 \ndell' UC Gestire Eventi

                                deactivate task
                        end

                    deactivate ss
                    ev -> sj: clear ()
                    activate sj
                    deactivate sj
                end

                ev-> evse : clear ()
                activate evse
                deactivate evse
                macroEvent <<-- ev: currentEvent
            deactivate ev

            macroEvent -> evdel: add(currentEvent)
            activate evdel
            deactivate evdel
            macroEvent -> events: remove(currentEvent)
            activate events
            deactivate events
            |||

            alt strategy.equals("All")
                loop ""for all"" ev ""in"" macroEvent.events ""where"" !ev.equals(currentEvent) && ev.state.equals("programmed")
                    macroEvent -> evstrg: delete()
                    note right: La definizione di //delete()// usata qua e sotto \n fa riferimento a quella sopra definita
                    activate evstrg
                        macroEvent <<-- evstrg: ev
                    deactivate evstrg
                    macroEvent -> evdel: add(ev)
                    activate evdel
                    deactivate evdel
                    macroEvent -> events: remove(ev)
                    activate events
                    deactivate events
                end
            else strategy.equals ("AllNext")
                loop ""for all"" ev ""in"" macroEvent.events ""where"" !ev.equals(currentEvent) && ev.getStartDate().compareTo(currentEvent.getStartDate()) > 0 && ev.state.equals("programmed")
                    macroEvent -> evstrg: delete()
                    activate evstrg
                        macroEvent <<-- evstrg: ev
                    deactivate evstrg
                    macroEvent -> evdel: add(ev)
                    activate evdel
                    deactivate evdel
                    macroEvent -> events: remove(ev)
                    activate events
                    deactivate events
                 end
            end
            em <<-- macroEvent: deleteEvents
        deactivate macroEvent
        |||

        em -> em: notifyDeleteEvent(event)
        activate em
            loop ""for all"" event ""in"" deleteEvents
                loop ""for all"" receivers ""in"" eventReceivers
                    em -> eer: updateDeleteEvent(event)
                    activate eer
                    deactivate eer
                end
            end
        deactivate em
        |||
UI <<-- em: deleteEvents
deactivate em
 end
@enduml