@startuml
skinparam Style strictuml

collections UI
participant "eventManager: EventManager" as em
participant "userMgr: UserManager" as um
participant "eventManager.currentEvent: Event" as ev
participant "service: Service" as service
participant "event.services: ArrayList<Service>" as ss
participant "ev: Event" as ev2
participant "changedEvents: ArrayList<Event>" as evc
participant "eventManager.eventReceivers: EventEventReceivers" as eer

UI -> em: addService(name, startOffset, startHour, endHour, diners, place, details, strategy)

activate em
    em -> um: getCurrentUser()
    activate um
        em <<-- um: user
    deactivate um

    alt !user.isOrganizer() startHour < endHour
        UI <<-- em: throw UseCaseLogicException
    else
        em -> ev: addService(name, startOffset, startHour, endHour, diners, place, details)
        activate ev
            ev -> service**: create(name, startOffset, startHour, endHour, diners, place, details)
            activate service
                service -> service: this.name = name
                service -> service: this.offsetDay = startOffset
                service -> service: this.startHour = startHour
                service -> service: this.endHour = endHour
                service -> service: this.diners = diners
                service -> service: this.place = place
                service -> service: this.typology = details
                service -> service: this.state = "preparation"
            ev <<-- service : service
            deactivate service

            ev -> ss: add(service)
            activate ss
            deactivate ss

        em <<-- ev: service
        deactivate ev

        em -> evc: add(this.currentEvent)
        activate evc
        deactivate evc

        alt strategy.equals("All")
            loop ""for all"" ev ""in"" event.macroEvent.events ""where"" !ev.equals(event) && (event.state.equals("programmed")
                em -> ev2: addService(name, startOffset, startHour, endHour, diners, place, details)
                note left: La definizione di //addService()// qua usata\nfa riferimento a quella sopra definita
                activate ev2
                em <<--ev2: newService
                deactivate ev2
                em -> evc: add(ev)
                activate evc
                deactivate evc
            end
        else strategy.equals ("AllNext")
            loop ""for all"" ev ""in"" macroEvent.events ""where"" !ev.equals(event) && ev.getStartDate().compareTo(event.getStartDate()) > 0 && (event.state.equals("programmed")
                em -> ev2: addService(name, startOffset, startHour, endHour, diners, place, details)
                activate ev2
                em <<--ev2: newService
                deactivate ev2
                em -> evc: add(ev)
                activate evc
                deactivate evc
            end
        end

        activate em
            loop ""for all"" event ""in"" changedEvents
            em -> em: notifyEditEvent(event)
            activate em
                loop ""for all"" receivers ""in"" eventReceivers
                    em -> eer: updateEditEvent(event)
                    activate eer
                    deactivate eer
                end
            end
        deactivate em

    UI <<-- em: services
    deactivate em
end
@enduml