@startuml Operazione 1
skinparam Style strictuml

title 1 createSummarySheet

collections UI

participant "taskManager: KitchenTaskManager" as tm
UI -> tm: createSummarySheet(event, service)
activate tm

participant "userMgr: UserManager" as um
participant "ktr: KitchenTaskEventReceiver" as ktr
participant "service: Service" as service
tm -> um: getCurrentUser()
activate um
tm <<-- um: user
deactivate um

alt !user.isChef() || event.assignedChef != user || !event.containsService(service)
    UI <<-- tm: throw UseCaseLogicException
else !event.isConfirmed()
    UI <<-- tm: throw EventException
else
    participant "sheet: SummarySheet" as ss
    tm -->> service: createSummarySheet()
    activate service

        service -->>ss**: create(this.getMenu())
        activate ss

            participant "kitchenDuties: ArrayList<KitchenDuty>" as kdList
            ss -->> kdList**: create()
            activate kdList
                return kitchenDuties
            deactivate kdList
    
            loop ""for all"" section ""in"" menu.sections
                loop ""for all"" menuItem ""in"" section.sectionItems
                    ss -> kdList: add(menuItem.itemRecipe)
                    activate kdList
                    deactivate kdList
            
                    participant "menuItem.itemRecipe: Recipe" as recipe
                    ss -> recipe: getSubDuties()
                    activate recipe
                        ss <<-- recipe: subRecipes
                    deactivate recipe

                    ss -> kdList: addAll(subRecipes)
                    activate kdList
                    deactivate kdList

                end
            end

            loop ""for all"" freeItem ""in"" menu.freeItems
                ss -> kdList: add(freeItem.itemRecipe)
                activate kdList
                deactivate kdList

                participant "freeItem.itemRecipe: Recipe" as recipe
                ss -> recipe: getSubDuties()
                activate recipe
                    ss <<-- recipe: subRecipes
                deactivate recipe

                ss -> kdList: addAll(subRecipes)
                activate kdList
                deactivate kdList
            end

            participant "tasks: ArrayList<Task>" as tasks
            ss -->> tasks**: create()
            activate tasks
                ss <<-- tasks: tasks
            deactivate tasks

            loop ""for all"" kitchenDuty ""in"" kitchenDuties
                participant "task : Task" as t
                ss -->> t **: create(kitchenDuty, false)
                activate t
                    t -> t: this.amount = 0
                    t -> t: this.estimatedDuration = Duration.ZERO
                    t -> t: this.toDo = true
                    t -> t: this.optionalDuty = false
                    t -> t: this.duty = kitchenDuty
                return task
                deactivate t
                ss ->tasks: add(task)
                activate tasks
                deactivate tasks
            end

            ss -> ss: this.tasks = tasks
            service <<-- ss: sheet
        deactivate ss
        service->service:this.sheet = sheet
        tm <<-- service: sheet
    deactivate service

    |||
    tm -> tm: this.currentSheet = sheet
    |||
    tm -> tm: notifySheetCreate(sheet)
    activate tm
    loop ""for all"" ktr ""in"" eventReceivers
        tm -> ktr : updateSheetCreate(sheet)
        activate ktr
        deactivate ktr
    end
    deactivate tm


    UI <<-- tm: sheet
    deactivate tm
    
end

@enduml